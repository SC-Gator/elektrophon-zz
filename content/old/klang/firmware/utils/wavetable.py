#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

"""

import numpy as np
import matplotlib.pyplot as plot
import math as Math
from scipy import signal


def summedSines(f) :
  x = np.linspace(-np.pi, np.pi, 1024)
  data = ( np.sin(x) + 0.5 * np.sin(2*x) + 0.5 * np.sin(3*x) + 0.5 * np.sin(4*x) + 0.5 * np.sin(5*x) + 0.5 * np.sin(6*x) + 0.5 * np.sin(7*x) + 0.5 * np.sin(8*x) + \
         0.5 * np.sin(9*x) + 0.5 * np.sin(10*x) + 0.5 * np.sin(11*x) + 0.5 * np.sin(12*x) + 0.5 * np.sin(13*x) + 0.5 * np.sin(14*x) + 0.5 * np.sin(15*x) + 0.5 * np.sin(16*x) + \
         0.5 * np.sin(17*x) + 0.5 * np.sin(18*x) + 0.5 * np.sin(19*x) + 0.5 * np.sin(20*x) + 0.5 * np.sin(21*x) + 0.5 * np.sin(22*x) + 0.5 * np.sin(23*x) + 0.5 * np.sin(24*x) + \
         0.5 * np.sin(25*x) + 0.5 * np.sin(26*x) + 0.5 * np.sin(27*x) + 0.5 * np.sin(28*x) + 0.5 * np.sin(29*x) + 0.5 * np.sin(30*x) + 0.5 * np.sin(31*x) + 0.5 * np.sin(32*x) ) / 16
  plot.plot(x, ( np.sin(x) + 0.5 * np.sin(2*x) + 0.5 * np.sin(3*x) + 0.5 * np.sin(4*x) + 0.5 * np.sin(5*x) + 0.5 * np.sin(6*x) + 0.5 * np.sin(7*x) + 0.5 * np.sin(8*x) + \
         0.5 * np.sin(9*x) + 0.5 * np.sin(10*x) + 0.5 * np.sin(11*x) + 0.5 * np.sin(12*x) + 0.5 * np.sin(13*x) + 0.5 * np.sin(14*x) + 0.5 * np.sin(15*x) + 0.5 * np.sin(16*x) + \
         0.5 * np.sin(17*x) + 0.5 * np.sin(18*x) + 0.5 * np.sin(19*x) + 0.5 * np.sin(20*x) + 0.5 * np.sin(21*x) + 0.5 * np.sin(22*x) + 0.5 * np.sin(23*x) + 0.5 * np.sin(24*x) + \
         0.5 * np.sin(25*x) + 0.5 * np.sin(26*x) + 0.5 * np.sin(27*x) + 0.5 * np.sin(28*x) + 0.5 * np.sin(29*x) + 0.5 * np.sin(30*x) + 0.5 * np.sin(31*x) + 0.5 * np.sin(32*x) ) / 16)

def makeSine(f):
  x = np.linspace(-np.pi, np.pi, 1024)
  data = np.sin(x)
  plot.plot(x, data)
  writeArray(f, data, "wt_sine")
    
def makeTriangle(f):
  x = np.linspace(-np.pi, np.pi, 1024)
  plot.plot(x, -signal.sawtooth(np.pi * 1/40000/1024 * x, 0.5))
  writeArray(f, -signal.sawtooth(2 * np.pi * 0.17 * x, 0.5), "wt_triangle")
    
def makeSaw(f):
  x = np.linspace(+np.pi, -np.pi, 1024)
  plot.plot(x, -signal.sawtooth(2 * np.pi * 0.16 * x))
  writeArray(f, -signal.sawtooth(2 * np.pi * 0.16 * x), "wt_saw")
    
def makeSquare(f):   
  x = np.linspace(-np.pi, np.pi, 1024)
  result = [0] * 1024
  index = 0
  for i in np.sin(x) :
    if i < 0 :
      result[index] = -1
    else :
      result[index] = 1      
    index = index + 1

  plot.plot(x, np.array(result))
  writeArray(f, result, "wt_square")

def writeHeader(f) :
  print("/* autogenerated wavetables */", file=f)
  print("#include \"wavetable.h\"", file=f)

def writeArray(f, table = [], name="wavetable"):   
  print("\nfloat %s[%d] = {\n\t" %(name,len(table)), file=f, end='')
  rows = 0
  for i in range(1,len(table)):
    if rows > 10 :
      rows = 0
      print("\n\t", file=f, end='')
    print("% f, " %(table[i]), file=f, end = '')
    rows = rows + 1
  print("\n};", file=f)
    
if __name__ == "__main__":

  with open('wavetable.c.new', 'w') as f:

    writeHeader(f);
    summedSines(f)
    makeSine(f)
    #makeTriangle(f)
    #makeSquare(f)
    #makeSaw(f)
    
  plot.title('wavetable') 

  # Give x axis label for the sine wave plot
  plot.xlabel('Time')

  # Give y axis label for the sine wave plot
  plot.ylabel('Amplitude = sin(time)')
  plot.grid(True, which='both')
  plot.axhline(y=0, color='k')
  plot.show()

